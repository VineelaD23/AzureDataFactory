{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dvineeladf"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vineeladadlsgen2.dfs.core.windows.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "vineelad.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "vineelad"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "admin123"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\admin123\\Desktop\\Project1"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "admin123"
		},
		"ls_KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvvineelad.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/bronzeLayer_single_folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray('accounts.csv', 'loans.csv', 'loan_payments.csv', 'customers.csv', 'transactions.csv')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"file": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RefDate": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-19T21:07:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_BronzeLayerProject1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFoldersFromVM",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_fetchFolders",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FetchLatestFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFoldersFromVM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFoldersFromVM').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "FolderModifiedTimeName",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_fetcheachfoldernametime",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "FolderModifiedTimeName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('FolderModifiedTimeName').output.lastModified,variables('RefDate'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LatestFolderName",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RefDate",
													"value": {
														"value": "@activity('FolderModifiedTimeName').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LatestFolderTime",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "latestFolder",
													"value": {
														"value": "@activity('FolderModifiedTimeName').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CopyDataFromonpremToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FetchLatestFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcefilesfromlocal",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@variables('latestFolder')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destinationbronzelayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RefDate": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					},
					"latestFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-20T17:37:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_fetchFolders')]",
				"[concat(variables('factoryId'), '/datasets/ds_sourcefilesfromlocal')]",
				"[concat(variables('factoryId'), '/datasets/ds_destinationbronzelayer')]",
				"[concat(variables('factoryId'), '/datasets/ds_fetcheachfoldernametime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_GoldLayerProject1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AccountsSCDType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AccountsGold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AccountsSilverFileSource": {},
									"GoldAccountsFileTargetSQL": {},
									"SQLDatabaseUpdateAccounts": {},
									"SQLDatabaseInsertAccounts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CustomersGold",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CustomerGold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SilverSourceFileCustomer": {},
									"TargetSQLTableCustomers": {},
									"InsertRowsSQLDatabaseCustomers": {},
									"UpdateRowsSQLDatabaseCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Loan_Payments",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Loan_PaymentsGold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SilverSourceFileLoanPayments": {},
									"SQLDatabaseTargetLoanPayments": {},
									"SQLDatabaseUpdateLoanPayments": {},
									"SQLDatabaseInsertLoanPayments": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoansSCDType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoansGoldLayer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceLoanSilver": {},
									"TargetSQLDtabaseLoans": {},
									"SQLDatabaseInsertLoans": {},
									"SQLDatabaseUpdateLoans": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TransactionsSCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransactionsSCDType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceTransactionsSilver": {},
									"TargetSQLDatabaseTransactions": {},
									"SQLDatabaseInsertRowsTransactions": {},
									"SQLDatabaseUpdateTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-20T06:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AccountsGold')]",
				"[concat(variables('factoryId'), '/dataflows/CustomerGold')]",
				"[concat(variables('factoryId'), '/dataflows/Loan_PaymentsGold')]",
				"[concat(variables('factoryId'), '/dataflows/LoansGoldLayer')]",
				"[concat(variables('factoryId'), '/dataflows/TransactionsSCDType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Project1_MainPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_BronzeLayerProject1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_SilverLayerProject1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_GoldLayerProject1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-20T06:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_BronzeLayerProject1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_SilverLayerProject1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_GoldLayerProject1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SilverLayerProject1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverLayer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SilverLayerRemoveDuplicates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"accountsBronze": {},
									"customersBronze": {},
									"LoanPaymentsBronze": {},
									"LoansBronze": {},
									"transactionsBronze": {},
									"accountsSilver": {},
									"CustomerSilver": {},
									"nullsCustomer": {},
									"nullsAccounts": {},
									"NullsLoanPayments": {},
									"LoanPaymentsSilver": {},
									"nullsLoans": {},
									"LoansSilver": {},
									"TransactionsSilverLayer": {},
									"nullsTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RefDate": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-20T17:38:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SilverLayerRemoveDuplicates')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test_adls_lastest_folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText5",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata2').output.lastModified,variables('RefDate'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RefDate",
													"value": {
														"value": "@activity('Get Metadata2').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "latestFolder",
													"value": {
														"value": "@activity('Get Metadata2').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText6",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@variables('latestFolder')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destinationbronzelayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RefDate": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					},
					"latestFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-19T21:07:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText6')]",
				"[concat(variables('factoryId'), '/datasets/ds_destinationbronzelayer')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "BronzeLayer",
						"fileSystem": "projectbootcamp1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "projectbootcamp1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "payment_id",
						"type": "String"
					},
					{
						"name": "loan_id",
						"type": "String"
					},
					{
						"name": "payment_date",
						"type": "String"
					},
					{
						"name": "payment_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"fileSystem": "projectbootcamp1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "projectbootcamp1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_destinationbronzelayer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "BronzeLayer",
						"fileSystem": "projectbootcamp1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fetchFolders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fetcheachfoldernametime')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourcefilesfromlocal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "*",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqldatabasePassword",
						"secretVersion": "95ff68b047534f0aa02457dd845a4f71"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmpassword",
						"secretVersion": "8e0934a5039c46dc992aa251bcf49f9c"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scheduletriggerProject1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Project1_MainPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 20,
						"startTime": "2025-04-19T18:50:00",
						"endTime": "2025-04-21T17:30:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Project1_MainPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AccountsGold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "AccountsSilverFileSource"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "GoldAccountsFileTargetSQL"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseUpdateAccounts"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseInsertAccounts"
						}
					],
					"transformations": [
						{
							"name": "RenameColumnsSource"
						},
						{
							"name": "Hashkey"
						},
						{
							"name": "Lookupsourcetarget"
						},
						{
							"name": "SplitNewandExistingRows"
						},
						{
							"name": "NewColumnsForAudit"
						},
						{
							"name": "UpdateAuditColumns"
						},
						{
							"name": "UpdateRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          account_id as short,",
						"          customer_id as short,",
						"          account_type as string,",
						"          balance as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/SilverLayer/Accounts','ArchieveSilver/Accounts'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'SilverLayer/Accounts',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> AccountsSilverFileSource",
						"source(output(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'accounts',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> GoldAccountsFileTargetSQL",
						"AccountsSilverFileSource select(mapColumn(",
						"          src_account_id = account_id,",
						"          src_customer_id = customer_id,",
						"          src_account_type = account_type,",
						"          src_balance = balance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumnsSource",
						"RenameColumnsSource derive(src_hashkey = crc32(concat(toString(src_account_id),toString(src_customer_id),src_account_type,toString(src_balance)))) ~> Hashkey",
						"Hashkey, GoldAccountsFileTargetSQL lookup(src_account_id == account_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Lookupsourcetarget",
						"Lookupsourcetarget split(isNull(account_id),",
						"     (src_account_id==account_id) && (src_hashkey!=hashkey),",
						"     disjoint: false) ~> SplitNewandExistingRows@(insert, update)",
						"SplitNewandExistingRows@insert derive(src_createdBy = 'Dataflow',",
						"          src_createdDate = currentTimestamp(),",
						"          src_updatedBy = 'Dataflow',",
						"          src_updatedDate = currentTimestamp()) ~> NewColumnsForAudit",
						"SplitNewandExistingRows@update derive(src_updatedDate = currentTimestamp(),",
						"          src_updatedBy = 'DataFlow-Updated') ~> UpdateAuditColumns",
						"UpdateAuditColumns alterRow(updateIf((1==1))) ~> UpdateRows",
						"UpdateRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'accounts',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['customer_id'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          account_id = src_account_id,",
						"          customer_id = src_customer_id,",
						"          account_type = src_account_type,",
						"          balance = src_balance,",
						"          hashkey = src_hashkey,",
						"          createdBy,",
						"          createdDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> SQLDatabaseUpdateAccounts",
						"NewColumnsForAudit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'accounts',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          account_id = src_account_id,",
						"          customer_id = src_customer_id,",
						"          account_type = src_account_type,",
						"          balance = src_balance,",
						"          hashkey = src_hashkey,",
						"          createdBy = src_createdBy,",
						"          createdDate = src_createdDate,",
						"          updatedBy = src_updatedBy,",
						"          updatedDate = src_updatedDate",
						"     )) ~> SQLDatabaseInsertAccounts"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerGold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "SilverSourceFileCustomer"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "TargetSQLTableCustomers"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "InsertRowsSQLDatabaseCustomers"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "UpdateRowsSQLDatabaseCustomer"
						}
					],
					"transformations": [
						{
							"name": "RenameSourceFile"
						},
						{
							"name": "Hashkey"
						},
						{
							"name": "lookupTargetSourceFiles"
						},
						{
							"name": "SplitNewandExistingRows"
						},
						{
							"name": "InsertAuditColumns"
						},
						{
							"name": "UpdateAuditColumns"
						},
						{
							"name": "UpdateRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as short,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['/SilverLayer/Customers','ArchieveSilver/Customers'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['SilverLayer/Customers/par*.csv']) ~> SilverSourceFileCustomer",
						"source(output(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TargetSQLTableCustomers",
						"SilverSourceFileCustomer select(mapColumn(",
						"          src_customer_id = customer_id,",
						"          src_first_name = first_name,",
						"          src_last_name = last_name,",
						"          src_address = address,",
						"          src_city = city,",
						"          src_state = state,",
						"          src_zip = zip",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameSourceFile",
						"RenameSourceFile derive(src_hashkey = crc32(concat(toString(src_customer_id),src_first_name,src_last_name,src_address,src_city,src_state,src_zip))) ~> Hashkey",
						"Hashkey, TargetSQLTableCustomers lookup(src_customer_id == customer_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupTargetSourceFiles",
						"lookupTargetSourceFiles split(isNull(customer_id),",
						"     (src_customer_id==customer_id) && (src_hashkey!=hashkey),",
						"     disjoint: false) ~> SplitNewandExistingRows@(insert, update)",
						"SplitNewandExistingRows@insert derive(src_createdby = 'DataFlow',",
						"          src_CreatedDate = currentTimestamp(),",
						"          src_updatedBy = 'DataFlow',",
						"          src_UpdatedDate = currentTimestamp()) ~> InsertAuditColumns",
						"SplitNewandExistingRows@update derive(src_udpatedDate = currentTimestamp(),",
						"          src_UpdatedBy = 'DataFlow-Updated') ~> UpdateAuditColumns",
						"UpdateAuditColumns alterRow(updateIf((1==1))) ~> UpdateRows",
						"InsertAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_id = src_customer_id,",
						"          first_name = src_first_name,",
						"          last_name = src_last_name,",
						"          address = src_address,",
						"          city = src_city,",
						"          state = src_state,",
						"          zip = src_zip,",
						"          hashkey = src_hashkey,",
						"          createdBy = src_createdby,",
						"          createdDate = src_CreatedDate,",
						"          updatedDate = src_UpdatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> InsertRowsSQLDatabaseCustomers",
						"UpdateRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['customer_id'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_id = src_customer_id,",
						"          first_name = src_first_name,",
						"          last_name = src_last_name,",
						"          address = src_address,",
						"          city = src_city,",
						"          state = src_state,",
						"          zip = src_zip,",
						"          hashkey = src_hashkey,",
						"          createdBy,",
						"          createdDate,",
						"          updatedDate = src_udpatedDate,",
						"          updatedBy = src_UpdatedBy",
						"     )) ~> UpdateRowsSQLDatabaseCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Loan_PaymentsGold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "SilverSourceFileLoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseTargetLoanPayments"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseUpdateLoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseInsertLoanPayments"
						}
					],
					"transformations": [
						{
							"name": "RenameSourceFiles"
						},
						{
							"name": "Hashkey"
						},
						{
							"name": "lookupSourceTarget"
						},
						{
							"name": "SplitNewandExistingRows"
						},
						{
							"name": "NewColumnsForAudit"
						},
						{
							"name": "updatedColumnsForAudit"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          payment_id as short,",
						"          loan_id as short,",
						"          payment_date as date,",
						"          payment_amount as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['SilverLayer/Loan_payments','ArchieveSilver/Loan_Payments'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['SilverLayer/Loan_payments/par*.csv']) ~> SilverSourceFileLoanPayments",
						"source(output(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loan_payments',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SQLDatabaseTargetLoanPayments",
						"SilverSourceFileLoanPayments select(mapColumn(",
						"          src_payment_id = payment_id,",
						"          src_loan_id = loan_id,",
						"          src_payment_date = payment_date,",
						"          src_payment_amount = payment_amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameSourceFiles",
						"RenameSourceFiles derive(src_hashkey = crc32(concat(toString(src_payment_id),toString(src_loan_id),toString(src_payment_date),toString(src_payment_amount)))) ~> Hashkey",
						"Hashkey, SQLDatabaseTargetLoanPayments lookup(src_payment_id == payment_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupSourceTarget",
						"lookupSourceTarget split(isNull(payment_id),",
						"     src_payment_id==payment_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> SplitNewandExistingRows@(insert, update)",
						"SplitNewandExistingRows@insert derive(src_updatedDate = currentTimestamp(),",
						"          src_updatedBy = 'DataFlow',",
						"          src_createdBy = 'DataFlow',",
						"          src_CreatedDate = currentTimestamp()) ~> NewColumnsForAudit",
						"SplitNewandExistingRows@update derive(src_updatedDate = currentTimestamp(),",
						"          src_updatedBy = 'DataFlow-Updated') ~> updatedColumnsForAudit",
						"updatedColumnsForAudit alterRow(updateIf((1==1))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loan_payments',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['payment_id'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          payment_id = src_payment_id,",
						"          loan_id = src_loan_id,",
						"          payment_date = src_payment_date,",
						"          payment_amount = src_payment_amount,",
						"          hashkey = src_hashkey,",
						"          createdBy,",
						"          createdDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> SQLDatabaseUpdateLoanPayments",
						"NewColumnsForAudit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loan_payments',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          payment_id = src_payment_id,",
						"          loan_id = src_loan_id,",
						"          payment_date = src_payment_date,",
						"          payment_amount = src_payment_amount,",
						"          hashkey = src_hashkey,",
						"          createdBy = src_createdBy,",
						"          createdDate = src_CreatedDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> SQLDatabaseInsertLoanPayments"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoansGoldLayer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sourceLoanSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "TargetSQLDtabaseLoans"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseInsertLoans"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseUpdateLoans"
						}
					],
					"transformations": [
						{
							"name": "RenameSourceColumns"
						},
						{
							"name": "Hashkey"
						},
						{
							"name": "lookupSourceTarget"
						},
						{
							"name": "splitNewExistingRows"
						},
						{
							"name": "InsertAuditColumns"
						},
						{
							"name": "updateAuditColumns"
						},
						{
							"name": "updateRowsLoans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          loan_id as short,",
						"          customer_id as short,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['SilverLayer/Loans','ArchieveSilver/Loans'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['SilverLayer/Loans/par*']) ~> sourceLoanSilver",
						"source(output(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loans',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TargetSQLDtabaseLoans",
						"sourceLoanSilver select(mapColumn(",
						"          src_loan_id = loan_id,",
						"          src_customer_id = customer_id,",
						"          src_loan_amount = loan_amount,",
						"          src_interest_rate = interest_rate,",
						"          src_loan_term = loan_term",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameSourceColumns",
						"RenameSourceColumns derive(src_hashkey = crc32(concat(toString(src_loan_id),toString(src_customer_id),toString(src_loan_amount),toString(src_interest_rate),toString(src_loan_term)))) ~> Hashkey",
						"Hashkey, TargetSQLDtabaseLoans lookup(src_loan_id == loan_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupSourceTarget",
						"lookupSourceTarget split(isNull(loan_id),",
						"     src_loan_id==loan_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> splitNewExistingRows@(insert, update)",
						"splitNewExistingRows@insert derive(src_createdBy = 'DataFlow',",
						"          src_updatedBy = 'DataFlow',",
						"          src_updatedDate = currentTimestamp(),",
						"          src_createdDate = currentTimestamp()) ~> InsertAuditColumns",
						"splitNewExistingRows@update derive(src_updatedBy = 'DataFlow-Updated',",
						"          src_updatedDate = currentTimestamp()) ~> updateAuditColumns",
						"updateAuditColumns alterRow(updateIf((1==1))) ~> updateRowsLoans",
						"InsertAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loans',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          loan_id = src_loan_id,",
						"          customer_id = src_customer_id,",
						"          loan_amount = src_loan_amount,",
						"          interest_rate = src_interest_rate,",
						"          loan_term = src_loan_term,",
						"          hashkey = src_hashkey,",
						"          createdBy = src_createdBy,",
						"          createdDate = src_createdDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> SQLDatabaseInsertLoans",
						"updateRowsLoans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'loans',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['loan_id'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          loan_id = src_loan_id,",
						"          customer_id = src_customer_id,",
						"          loan_amount = src_loan_amount,",
						"          interest_rate = src_interest_rate,",
						"          loan_term = src_loan_term,",
						"          hashkey = src_hashkey,",
						"          createdBy,",
						"          createdDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy",
						"     )) ~> SQLDatabaseUpdateLoans"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverLayerRemoveDuplicates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "accountsBronze"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "customersBronze"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "LoanPaymentsBronze"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "LoansBronze"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "transactionsBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "accountsSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "nullsCustomer"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "nullsAccounts"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "NullsLoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "LoanPaymentsSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "nullsLoans"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "LoansSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "TransactionsSilverLayer"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "nullsTransactions"
						}
					],
					"transformations": [
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "split1"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "split2"
						},
						{
							"name": "split3"
						},
						{
							"name": "window1"
						},
						{
							"name": "split4"
						},
						{
							"name": "window2"
						},
						{
							"name": "split5"
						},
						{
							"name": "RemoveDuplicatesTransactions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          account_id as short,",
						"          customer_id as short,",
						"          account_type as string,",
						"          balance as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/BronzeLayer','/ArchieveBronze/Accounts'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'BronzeLayer',",
						"     fileName: 'accounts.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> accountsBronze",
						"source(output(",
						"          customer_id as short,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/BronzeLayer','ArchieveBronze/Customers'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'BronzeLayer',",
						"     fileName: 'customers.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> customersBronze",
						"source(output(",
						"          payment_id as short,",
						"          loan_id as short,",
						"          payment_date as date,",
						"          payment_amount as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/BronzeLayer','ArchieveBronze/LoanPayments'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'BronzeLayer',",
						"     fileName: 'loan_payments.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> LoanPaymentsBronze",
						"source(output(",
						"          loan_id as short,",
						"          customer_id as short,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/BronzeLayer','ArchieveBronze/Loans'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'BronzeLayer',",
						"     fileName: 'loans.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> LoansBronze",
						"source(output(",
						"          transaction_id as short,",
						"          account_id as short,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/BronzeLayer','ArchieveBronze/Transactions'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'BronzeLayer',",
						"     fileName: 'transactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> transactionsBronze",
						"split2@removenullsAccounts aggregate(groupBy(account_id,",
						"          customer_id,",
						"          account_type,",
						"          balance),",
						"     column1 = first(account_id)) ~> RemoveDuplicates",
						"customersBronze split(isNull(customer_id) || isNull(first_name) || isNull(last_name) || isNull(address) || isNull(city) || isNull(state) || isNull(zip),",
						"     disjoint: false) ~> split1@(newfilefornulls, removenulls)",
						"split1@removenulls aggregate(groupBy(customer_id,",
						"          first_name,",
						"          last_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip),",
						"     column = first(customer_id)) ~> aggregate4",
						"accountsBronze split(!isNull(account_id) && !isNull(customer_id) && !isNull(account_type) && !isNull(balance),",
						"     disjoint: false) ~> split2@(removenullsAccounts, newfilefornullsAccounts)",
						"LoanPaymentsBronze split(isNull(payment_id) || isNull(loan_id) || isNull(payment_date) || isNull(payment_date),",
						"     disjoint: false) ~> split3@(nullvaluesloanPayments, removeNullsLoanPayments)",
						"split3@removeNullsLoanPayments window(over(payment_id,",
						"          loan_id,",
						"          payment_date),",
						"     asc(payment_id, true),",
						"     rowNumber = rowNumber()) ~> window1",
						"LoansBronze split(isNull(loan_id) || isNull(customer_id) || isNull(loan_amount) || isNull(interest_rate) || isNull(loan_term),",
						"     disjoint: false) ~> split4@(NullValuesLoans, RemoveNullsLoans)",
						"split4@RemoveNullsLoans window(over(loan_id,",
						"          customer_id,",
						"          loan_amount,",
						"          interest_rate,",
						"          loan_term),",
						"     asc(loan_id, true),",
						"     rowNumber = rowNumber()) ~> window2",
						"transactionsBronze split(!isNull(transaction_id) && !isNull(account_id) && !isNull(transaction_date) && !isNull(transaction_amount) && !isNull(transaction_type),",
						"     disjoint: false) ~> split5@(removeNullsTransactions, NullValuesTransactions)",
						"split5@removeNullsTransactions window(over(transaction_type,",
						"          transaction_id,",
						"          account_id,",
						"          transaction_date,",
						"          transaction_amount),",
						"     asc(transaction_id, true),",
						"     rowNumber = rowNumber()) ~> RemoveDuplicatesTransactions",
						"RemoveDuplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'SilverLayer/Accounts',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          account_id,",
						"          customer_id,",
						"          account_type,",
						"          balance",
						"     )) ~> accountsSilver",
						"aggregate4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'SilverLayer/Customers',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id,",
						"          first_name,",
						"          last_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip",
						"     )) ~> CustomerSilver",
						"split1@newfilefornulls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'NullRows/Customers',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id,",
						"          first_name,",
						"          last_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip",
						"     )) ~> nullsCustomer",
						"split2@newfilefornullsAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'NullRows/Accounts',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          account_id,",
						"          customer_id,",
						"          account_type,",
						"          balance",
						"     )) ~> nullsAccounts",
						"split3@nullvaluesloanPayments sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'NullRows/LoanPayments',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          payment_id,",
						"          loan_id,",
						"          payment_date,",
						"          payment_amount",
						"     )) ~> NullsLoanPayments",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'SilverLayer/Loan_payments',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          payment_id,",
						"          loan_id,",
						"          payment_date,",
						"          payment_amount",
						"     )) ~> LoanPaymentsSilver",
						"split4@NullValuesLoans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'NullRows/Loans',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          loan_id,",
						"          customer_id,",
						"          loan_amount,",
						"          interest_rate,",
						"          loan_term",
						"     )) ~> nullsLoans",
						"window2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'SilverLayer/Loans',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          loan_id,",
						"          customer_id,",
						"          loan_amount,",
						"          interest_rate,",
						"          loan_term",
						"     )) ~> LoansSilver",
						"RemoveDuplicatesTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: '/SilverLayer/Transactions',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          transaction_id,",
						"          account_id,",
						"          transaction_date,",
						"          transaction_amount,",
						"          transaction_type",
						"     )) ~> TransactionsSilverLayer",
						"split5@NullValuesTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     folderPath: 'NullRows/Transactions',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          transaction_id,",
						"          account_id,",
						"          transaction_date,",
						"          transaction_amount,",
						"          transaction_type",
						"     )) ~> nullsTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionsSCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sourceTransactionsSilver"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "TargetSQLDatabaseTransactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseInsertRowsTransactions"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "SQLDatabaseUpdateTransactions"
						}
					],
					"transformations": [
						{
							"name": "RenameSourceColumns"
						},
						{
							"name": "Hashkey"
						},
						{
							"name": "lookupSourceTarget"
						},
						{
							"name": "splitNewExistingRows"
						},
						{
							"name": "unionNewUpdatedRows"
						},
						{
							"name": "InsertAuditColumns"
						},
						{
							"name": "updateAuditColumns"
						},
						{
							"name": "UpdateRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          transaction_id as short,",
						"          account_id as short,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['','ArchieveSilver/Transactions'],",
						"     format: 'delimited',",
						"     fileSystem: 'projectbootcamp1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['SilverLayer/Transactions/par*']) ~> sourceTransactionsSilver",
						"source(output(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string,",
						"          isActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Transactions',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TargetSQLDatabaseTransactions",
						"sourceTransactionsSilver select(mapColumn(",
						"          src_transaction_id = transaction_id,",
						"          src_account_id = account_id,",
						"          src_transaction_date = transaction_date,",
						"          src_transaction_amount = transaction_amount,",
						"          src_transaction_type = transaction_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameSourceColumns",
						"RenameSourceColumns derive(src_hashkey = crc32(concat(toString(src_transaction_id),toString(src_account_id), toString(src_transaction_date),toString(src_transaction_amount),toString(src_transaction_type)))) ~> Hashkey",
						"Hashkey, TargetSQLDatabaseTransactions lookup(src_transaction_id == transaction_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupSourceTarget",
						"lookupSourceTarget split(isNull(transaction_id),",
						"     src_transaction_id==transaction_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> splitNewExistingRows@(insert, update)",
						"splitNewExistingRows@insert, splitNewExistingRows@update union(byName: true)~> unionNewUpdatedRows",
						"unionNewUpdatedRows derive(src_createdBy = 'DataFlow',",
						"          src_CreatedDate = currentTimestamp(),",
						"          src_UpdatedBy = \"DataFlow\",",
						"          src_updatedDate = currentTimestamp(),",
						"          src_isActive = 1) ~> InsertAuditColumns",
						"splitNewExistingRows@update derive(src_updatedDate = currentTimestamp(),",
						"          src_updatedBy = 'DataFlow-Updated',",
						"          src_isActive = 0) ~> updateAuditColumns",
						"updateAuditColumns alterRow(updateIf((1==1))) ~> UpdateRows",
						"InsertAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Transactions',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          transaction_id = src_transaction_id,",
						"          account_id = src_account_id,",
						"          transaction_date = src_transaction_date,",
						"          transaction_amount = src_transaction_amount,",
						"          transaction_type = src_transaction_type,",
						"          hashkey = src_hashkey,",
						"          createdBy = src_createdBy,",
						"          createdDate = src_CreatedDate,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_UpdatedBy,",
						"          isActive = src_isActive",
						"     )) ~> SQLDatabaseInsertRowsTransactions",
						"UpdateRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string,",
						"          hashkey as long,",
						"          createdBy as string,",
						"          createdDate as timestamp,",
						"          updatedDate as timestamp,",
						"          updatedBy as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Transactions',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['transaction_id','hashkey'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          transaction_id,",
						"          updatedDate = src_updatedDate,",
						"          updatedBy = src_updatedBy,",
						"          isActive = src_isActive,",
						"          hashkey",
						"     )) ~> SQLDatabaseUpdateTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		}
	]
}
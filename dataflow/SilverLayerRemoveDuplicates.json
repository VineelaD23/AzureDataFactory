{
	"name": "SilverLayerRemoveDuplicates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "accountsBronze"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "customersBronze"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPaymentsBronze"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoansBronze"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "transactionsBronze"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "accountsSilver"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerSilver"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "nullsCustomer"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "nullsAccounts"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "NullsLoanPayments"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPaymentsSilver"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "nullsLoans"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoansSilver"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "TransactionsSilverLayer"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "nullsTransactions"
				}
			],
			"transformations": [
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "split1"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "split2"
				},
				{
					"name": "split3"
				},
				{
					"name": "window1"
				},
				{
					"name": "split4"
				},
				{
					"name": "window2"
				},
				{
					"name": "split5"
				},
				{
					"name": "RemoveDuplicatesTransactions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          account_id as short,",
				"          customer_id as short,",
				"          account_type as string,",
				"          balance as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/BronzeLayer','/ArchieveBronze/Accounts'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'BronzeLayer',",
				"     fileName: 'accounts.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> accountsBronze",
				"source(output(",
				"          customer_id as short,",
				"          first_name as string,",
				"          last_name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/BronzeLayer','ArchieveBronze/Customers'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'BronzeLayer',",
				"     fileName: 'customers.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> customersBronze",
				"source(output(",
				"          payment_id as short,",
				"          loan_id as short,",
				"          payment_date as date,",
				"          payment_amount as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/BronzeLayer','ArchieveBronze/LoanPayments'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'BronzeLayer',",
				"     fileName: 'loan_payments.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LoanPaymentsBronze",
				"source(output(",
				"          loan_id as short,",
				"          customer_id as short,",
				"          loan_amount as double,",
				"          interest_rate as double,",
				"          loan_term as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/BronzeLayer','ArchieveBronze/Loans'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'BronzeLayer',",
				"     fileName: 'loans.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LoansBronze",
				"source(output(",
				"          transaction_id as short,",
				"          account_id as short,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/BronzeLayer','ArchieveBronze/Transactions'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'BronzeLayer',",
				"     fileName: 'transactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> transactionsBronze",
				"split2@removenullsAccounts aggregate(groupBy(account_id,",
				"          customer_id,",
				"          account_type,",
				"          balance),",
				"     column1 = first(account_id)) ~> RemoveDuplicates",
				"customersBronze split(isNull(customer_id) || isNull(first_name) || isNull(last_name) || isNull(address) || isNull(city) || isNull(state) || isNull(zip),",
				"     disjoint: false) ~> split1@(newfilefornulls, removenulls)",
				"split1@removenulls aggregate(groupBy(customer_id,",
				"          first_name,",
				"          last_name,",
				"          address,",
				"          city,",
				"          state,",
				"          zip),",
				"     column = first(customer_id)) ~> aggregate4",
				"accountsBronze split(!isNull(account_id) && !isNull(customer_id) && !isNull(account_type) && !isNull(balance),",
				"     disjoint: false) ~> split2@(removenullsAccounts, newfilefornullsAccounts)",
				"LoanPaymentsBronze split(isNull(payment_id) || isNull(loan_id) || isNull(payment_date) || isNull(payment_date),",
				"     disjoint: false) ~> split3@(nullvaluesloanPayments, removeNullsLoanPayments)",
				"split3@removeNullsLoanPayments window(over(payment_id,",
				"          loan_id,",
				"          payment_date),",
				"     asc(payment_id, true),",
				"     rowNumber = rowNumber()) ~> window1",
				"LoansBronze split(isNull(loan_id) || isNull(customer_id) || isNull(loan_amount) || isNull(interest_rate) || isNull(loan_term),",
				"     disjoint: false) ~> split4@(NullValuesLoans, RemoveNullsLoans)",
				"split4@RemoveNullsLoans window(over(loan_id,",
				"          customer_id,",
				"          loan_amount,",
				"          interest_rate,",
				"          loan_term),",
				"     asc(loan_id, true),",
				"     rowNumber = rowNumber()) ~> window2",
				"transactionsBronze split(!isNull(transaction_id) && !isNull(account_id) && !isNull(transaction_date) && !isNull(transaction_amount) && !isNull(transaction_type),",
				"     disjoint: false) ~> split5@(removeNullsTransactions, NullValuesTransactions)",
				"split5@removeNullsTransactions window(over(transaction_type,",
				"          transaction_id,",
				"          account_id,",
				"          transaction_date,",
				"          transaction_amount),",
				"     asc(transaction_id, true),",
				"     rowNumber = rowNumber()) ~> RemoveDuplicatesTransactions",
				"RemoveDuplicates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'SilverLayer/Accounts',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          account_id,",
				"          customer_id,",
				"          account_type,",
				"          balance",
				"     )) ~> accountsSilver",
				"aggregate4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'SilverLayer/Customers',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          customer_id,",
				"          first_name,",
				"          last_name,",
				"          address,",
				"          city,",
				"          state,",
				"          zip",
				"     )) ~> CustomerSilver",
				"split1@newfilefornulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'NullRows/Customers',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          customer_id,",
				"          first_name,",
				"          last_name,",
				"          address,",
				"          city,",
				"          state,",
				"          zip",
				"     )) ~> nullsCustomer",
				"split2@newfilefornullsAccounts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'NullRows/Accounts',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          account_id,",
				"          customer_id,",
				"          account_type,",
				"          balance",
				"     )) ~> nullsAccounts",
				"split3@nullvaluesloanPayments sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'NullRows/LoanPayments',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          payment_id,",
				"          loan_id,",
				"          payment_date,",
				"          payment_amount",
				"     )) ~> NullsLoanPayments",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'SilverLayer/Loan_payments',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          payment_id,",
				"          loan_id,",
				"          payment_date,",
				"          payment_amount",
				"     )) ~> LoanPaymentsSilver",
				"split4@NullValuesLoans sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'NullRows/Loans',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          loan_id,",
				"          customer_id,",
				"          loan_amount,",
				"          interest_rate,",
				"          loan_term",
				"     )) ~> nullsLoans",
				"window2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'SilverLayer/Loans',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          loan_id,",
				"          customer_id,",
				"          loan_amount,",
				"          interest_rate,",
				"          loan_term",
				"     )) ~> LoansSilver",
				"RemoveDuplicatesTransactions sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: '/SilverLayer/Transactions',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          transaction_id,",
				"          account_id,",
				"          transaction_date,",
				"          transaction_amount,",
				"          transaction_type",
				"     )) ~> TransactionsSilverLayer",
				"split5@NullValuesTransactions sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     folderPath: 'NullRows/Transactions',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          transaction_id,",
				"          account_id,",
				"          transaction_date,",
				"          transaction_amount,",
				"          transaction_type",
				"     )) ~> nullsTransactions"
			]
		}
	}
}
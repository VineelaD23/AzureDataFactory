{
	"name": "TransactionsSCDType2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sourceTransactionsSilver"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "TargetSQLDatabaseTransactions"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "SQLDatabaseInsertRowsTransactions"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "SQLDatabaseUpdateTransactions"
				}
			],
			"transformations": [
				{
					"name": "RenameSourceColumns"
				},
				{
					"name": "Hashkey"
				},
				{
					"name": "lookupSourceTarget"
				},
				{
					"name": "splitNewExistingRows"
				},
				{
					"name": "unionNewUpdatedRows"
				},
				{
					"name": "InsertAuditColumns"
				},
				{
					"name": "updateAuditColumns"
				},
				{
					"name": "UpdateRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          account_id as short,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['','ArchieveSilver/Transactions'],",
				"     format: 'delimited',",
				"     fileSystem: 'projectbootcamp1',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['SilverLayer/Transactions/par*']) ~> sourceTransactionsSilver",
				"source(output(",
				"          transaction_id as integer,",
				"          account_id as integer,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string,",
				"          hashkey as long,",
				"          createdBy as string,",
				"          createdDate as timestamp,",
				"          updatedDate as timestamp,",
				"          updatedBy as string,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Transactions',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> TargetSQLDatabaseTransactions",
				"sourceTransactionsSilver select(mapColumn(",
				"          src_transaction_id = transaction_id,",
				"          src_account_id = account_id,",
				"          src_transaction_date = transaction_date,",
				"          src_transaction_amount = transaction_amount,",
				"          src_transaction_type = transaction_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameSourceColumns",
				"RenameSourceColumns derive(src_hashkey = crc32(concat(toString(src_transaction_id),toString(src_account_id), toString(src_transaction_date),toString(src_transaction_amount),toString(src_transaction_type)))) ~> Hashkey",
				"Hashkey, TargetSQLDatabaseTransactions lookup(src_transaction_id == transaction_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupSourceTarget",
				"lookupSourceTarget split(isNull(transaction_id),",
				"     src_transaction_id==transaction_id && src_hashkey!=hashkey,",
				"     disjoint: false) ~> splitNewExistingRows@(insert, update)",
				"splitNewExistingRows@insert, splitNewExistingRows@update union(byName: true)~> unionNewUpdatedRows",
				"unionNewUpdatedRows derive(src_createdBy = 'DataFlow',",
				"          src_CreatedDate = currentTimestamp(),",
				"          src_UpdatedBy = \"DataFlow\",",
				"          src_updatedDate = currentTimestamp(),",
				"          src_isActive = 1) ~> InsertAuditColumns",
				"splitNewExistingRows@update derive(src_updatedDate = currentTimestamp(),",
				"          src_updatedBy = 'DataFlow-Updated',",
				"          src_isActive = 0) ~> updateAuditColumns",
				"updateAuditColumns alterRow(updateIf((1==1))) ~> UpdateRows",
				"InsertAuditColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          transaction_id as integer,",
				"          account_id as integer,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string,",
				"          hashkey as long,",
				"          createdBy as string,",
				"          createdDate as timestamp,",
				"          updatedDate as timestamp,",
				"          updatedBy as string,",
				"          isActive as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Transactions',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          transaction_id = src_transaction_id,",
				"          account_id = src_account_id,",
				"          transaction_date = src_transaction_date,",
				"          transaction_amount = src_transaction_amount,",
				"          transaction_type = src_transaction_type,",
				"          hashkey = src_hashkey,",
				"          createdBy = src_createdBy,",
				"          createdDate = src_CreatedDate,",
				"          updatedDate = src_updatedDate,",
				"          updatedBy = src_UpdatedBy,",
				"          isActive = src_isActive",
				"     )) ~> SQLDatabaseInsertRowsTransactions",
				"UpdateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          transaction_id as integer,",
				"          account_id as integer,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string,",
				"          hashkey as long,",
				"          createdBy as string,",
				"          createdDate as timestamp,",
				"          updatedDate as timestamp,",
				"          updatedBy as string,",
				"          isActive as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Transactions',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['transaction_id','hashkey'],",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          transaction_id,",
				"          updatedDate = src_updatedDate,",
				"          updatedBy = src_updatedBy,",
				"          isActive = src_isActive,",
				"          hashkey",
				"     )) ~> SQLDatabaseUpdateTransactions"
			]
		}
	}
}